{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _jsxFileName = \"/home/andrew/Documents/maven/mavenclient/node_modules/react-native-check-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;\n\nvar CheckBox = function (_Component) {\n  (0, _inherits2.default)(CheckBox, _Component);\n\n  var _super = _createSuper(CheckBox);\n\n  function CheckBox(props) {\n    (0, _classCallCheck2.default)(this, CheckBox);\n    return _super.call(this, props);\n  }\n\n  (0, _createClass2.default)(CheckBox, [{\n    key: \"onClick\",\n    value: function onClick() {\n      this.props.onClick();\n    }\n  }, {\n    key: \"_renderLeft\",\n    value: function _renderLeft() {\n      if (this.props.leftTextView) return this.props.leftTextView;\n      if (!this.props.leftText) return null;\n      return _react.default.createElement(_reactNative.Text, {\n        style: [styles.leftText, this.props.leftTextStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, this.props.leftText);\n    }\n  }, {\n    key: \"_renderRight\",\n    value: function _renderRight() {\n      if (this.props.rightTextView) return this.props.rightTextView;\n      if (!this.props.rightText) return null;\n      return _react.default.createElement(_reactNative.Text, {\n        style: [styles.rightText, this.props.rightTextStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, this.props.rightText);\n    }\n  }, {\n    key: \"_renderImage\",\n    value: function _renderImage() {\n      if (this.props.isIndeterminate) {\n        return this.props.indeterminateImage ? this.props.indeterminateImage : this.genCheckedImage();\n      }\n\n      if (this.props.isChecked) {\n        return this.props.checkedImage ? this.props.checkedImage : this.genCheckedImage();\n      } else {\n        return this.props.unCheckedImage ? this.props.unCheckedImage : this.genCheckedImage();\n      }\n    }\n  }, {\n    key: \"_getCheckedCheckBoxColor\",\n    value: function _getCheckedCheckBoxColor() {\n      return this.props.checkedCheckBoxColor ? this.props.checkedCheckBoxColor : this.props.checkBoxColor;\n    }\n  }, {\n    key: \"_getUncheckedCheckBoxColor\",\n    value: function _getUncheckedCheckBoxColor() {\n      return this.props.uncheckedCheckBoxColor ? this.props.uncheckedCheckBoxColor : this.props.checkBoxColor;\n    }\n  }, {\n    key: \"_getTintColor\",\n    value: function _getTintColor() {\n      return this.props.isChecked ? this._getCheckedCheckBoxColor() : this._getUncheckedCheckBoxColor();\n    }\n  }, {\n    key: \"genCheckedImage\",\n    value: function genCheckedImage() {\n      var source;\n\n      if (this.props.isIndeterminate) {\n        source = require('./img/ic_indeterminate_check_box.png');\n      } else {\n        source = this.props.isChecked ? require('./img/ic_check_box.png') : require('./img/ic_check_box_outline_blank.png');\n      }\n\n      return _react.default.createElement(_reactNative.Image, {\n        source: source,\n        style: {\n          tintColor: this._getTintColor()\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _react.default.createElement(_reactNative.TouchableHighlight, {\n        style: this.props.style,\n        onPress: function onPress() {\n          return _this.onClick();\n        },\n        underlayColor: \"transparent\",\n        disabled: this.props.disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }, this._renderLeft(), this._renderImage(), this._renderRight()));\n    }\n  }]);\n  return CheckBox;\n}(_react.Component);\n\nexports.default = CheckBox;\nCheckBox.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  leftText: _propTypes.default.string,\n  leftTextView: _propTypes.default.element,\n  rightText: _propTypes.default.string,\n  leftTextStyle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object]),\n  rightTextView: _propTypes.default.element,\n  rightTextStyle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object]),\n  checkedImage: _propTypes.default.element,\n  unCheckedImage: _propTypes.default.element,\n  onClick: _propTypes.default.func.isRequired,\n  isChecked: _propTypes.default.bool.isRequired,\n  isIndeterminate: _propTypes.default.bool.isRequired,\n  checkBoxColor: _propTypes.default.string,\n  checkedCheckBoxColor: _propTypes.default.string,\n  uncheckedCheckBoxColor: _propTypes.default.string,\n  disabled: _propTypes.default.bool\n});\nCheckBox.defaultProps = {\n  isChecked: false,\n  isIndeterminate: false,\n  leftTextStyle: {},\n  rightTextStyle: {}\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  leftText: {\n    flex: 1\n  },\n  rightText: {\n    flex: 1,\n    marginLeft: 10\n  }\n});","map":{"version":3,"sources":["/home/andrew/Documents/maven/mavenclient/node_modules/react-native-check-box/index.js"],"names":["ViewPropTypes","RNViewPropTypes","View","propTypes","CheckBox","props","onClick","leftTextView","leftText","styles","leftTextStyle","rightTextView","rightText","rightTextStyle","isIndeterminate","indeterminateImage","genCheckedImage","isChecked","checkedImage","unCheckedImage","checkedCheckBoxColor","checkBoxColor","uncheckedCheckBoxColor","_getCheckedCheckBoxColor","_getUncheckedCheckBoxColor","source","require","tintColor","_getTintColor","style","disabled","container","_renderLeft","_renderImage","_renderRight","Component","PropTypes","string","element","oneOfType","number","object","func","isRequired","bool","defaultProps","StyleSheet","create","flexDirection","alignItems","flex","marginLeft"],"mappings":"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","sourcesContent":["/**\n * react-native-check-box\n * Checkbox component for react native, it works on iOS and Android\n * https://github.com/crazycodeboy/react-native-check-box\n * Email:crazycodeboy@gmail.com\n * Blog:http://www.devio.org\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Image,\n    Text,\n    TouchableHighlight,\n    ViewPropTypes as RNViewPropTypes,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\n\nexport default class CheckBox extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static propTypes = {\n        ...ViewPropTypes,\n        leftText: PropTypes.string,\n        leftTextView: PropTypes.element,\n        rightText: PropTypes.string,\n        leftTextStyle: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,\n            PropTypes.object,\n        ]),\n        rightTextView: PropTypes.element,\n        rightTextStyle: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,\n            PropTypes.object,\n        ]),\n        checkedImage: PropTypes.element,\n        unCheckedImage: PropTypes.element,\n        onClick: PropTypes.func.isRequired,\n        isChecked: PropTypes.bool.isRequired,\n        isIndeterminate: PropTypes.bool.isRequired,\n        checkBoxColor: PropTypes.string,\n        checkedCheckBoxColor: PropTypes.string,\n        uncheckedCheckBoxColor: PropTypes.string,\n        disabled: PropTypes.bool,\n    }\n    static defaultProps = {\n        isChecked: false,\n        isIndeterminate: false,\n        leftTextStyle: {},\n        rightTextStyle: {}\n    }\n\n    onClick() {\n        this.props.onClick();\n    }\n\n    _renderLeft() {\n        if (this.props.leftTextView) return this.props.leftTextView;\n        if (!this.props.leftText) return null;\n        return (\n            <Text style={[styles.leftText, this.props.leftTextStyle]}>{this.props.leftText}</Text>\n        );\n    }\n\n    _renderRight() {\n        if (this.props.rightTextView) return this.props.rightTextView;\n        if (!this.props.rightText) return null;\n        return (\n            <Text style={[styles.rightText, this.props.rightTextStyle]}>{this.props.rightText}</Text>\n        );\n    }\n\n    _renderImage() {\n        if (this.props.isIndeterminate) {\n            return this.props.indeterminateImage ? this.props.indeterminateImage : this.genCheckedImage();\n        }\n        if (this.props.isChecked) {\n            return this.props.checkedImage ? this.props.checkedImage : this.genCheckedImage();\n        } else {\n            return this.props.unCheckedImage ? this.props.unCheckedImage : this.genCheckedImage();\n        }\n    }\n\n    _getCheckedCheckBoxColor() {\n        return this.props.checkedCheckBoxColor ? this.props.checkedCheckBoxColor : this.props.checkBoxColor\n    }\n\n    _getUncheckedCheckBoxColor() {\n        return this.props.uncheckedCheckBoxColor ? this.props.uncheckedCheckBoxColor : this.props.checkBoxColor\n    }\n\n    _getTintColor() {\n        return this.props.isChecked ? this._getCheckedCheckBoxColor() : this._getUncheckedCheckBoxColor()\n    }\n\n    genCheckedImage() {\n        let source;\n        if (this.props.isIndeterminate) {\n            source = require('./img/ic_indeterminate_check_box.png');\n        }\n        else {\n            source = this.props.isChecked ? require('./img/ic_check_box.png') : require('./img/ic_check_box_outline_blank.png');\n        }\n\n        return (\n            <Image source={source} style={{tintColor: this._getTintColor()}}/>\n        );\n    }\n\n    render() {\n        return (\n            <TouchableHighlight\n                style={this.props.style}\n                onPress={() => this.onClick()}\n                underlayColor='transparent'\n                disabled={this.props.disabled}\n            >\n                <View style={styles.container}>\n                    {this._renderLeft()}\n                    {this._renderImage()}\n                    {this._renderRight()}\n                </View>\n            </TouchableHighlight>\n        );\n    }\n}\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    leftText: {\n        flex: 1,\n    },\n    rightText: {\n        flex: 1,\n        marginLeft: 10\n    }\n});\n"]},"metadata":{},"sourceType":"script"}