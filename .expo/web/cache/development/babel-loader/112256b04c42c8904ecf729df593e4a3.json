{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _client = _interopRequireDefault(require(\"./assets/client\"));\n\nvar _text = _interopRequireDefault(require(\"./assets/text\"));\n\nvar _textSecondary = _interopRequireDefault(require(\"./assets/text-secondary\"));\n\nvar _reactNativeCheckBox = _interopRequireDefault(require(\"react-native-check-box\"));\n\nvar _jsxFileName = \"/home/andrew/Documents/maven/mavenclient/src/phrase-list.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar PhraseList = function (_React$Component) {\n  (0, _inherits2.default)(PhraseList, _React$Component);\n\n  var _super = _createSuper(PhraseList);\n\n  function PhraseList(props, data) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PhraseList);\n    _this = _super.call(this, props);\n    _this.state = {\n      user: _this.props.data.user,\n      phrases: [],\n      userphrases: []\n    };\n    _this.PhraseItem = _this.PhraseItem.bind((0, _assertThisInitialized2.default)(_this));\n    console.log(_this.state.user);\n    return _this;\n  }\n\n  (0, _createClass2.default)(PhraseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getPhrases();\n    }\n  }, {\n    key: \"getPhrases\",\n    value: function getPhrases() {\n      var _this2 = this;\n\n      return _regenerator.default.async(function getPhrases$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _client.default.fetch('*[_type==\"phrase\"]').then(function (res) {\n                _this2.setState({\n                  phrases: res\n                });\n              }).catch(function (err) {\n                return console.error(err);\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"PhraseItem\",\n    value: function PhraseItem(_ref) {\n      var phrase = _ref.item;\n      return _react.default.createElement(_reactNative.View, {\n        style: styles.row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.rowData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.categories,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_textSecondary.default, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }\n      }, phrase.categoryText, \" \\u25CF \", phrase.subcategoryText)), _react.default.createElement(_reactNative.View, {\n        style: styles.phrase,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_text.default, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, phrase.phraseText))), _react.default.createElement(_reactNative.View, {\n        style: styles.checkbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(Image, {\n        source: require('./assets/images/checkbox.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_reactNative.FlatList, {\n        data: this.state.phrases,\n        renderItem: this.PhraseItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n  return PhraseList;\n}(_react.default.Component);\n\nvar styles = _reactNative.StyleSheet.create({\n  row: {\n    width: 375,\n    flexDirection: \"row\",\n    backgroundColor: \"white\",\n    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderColor: \"rgba(0,0,0,0.1)\"\n  },\n  categories: {\n    marginTop: 14\n  },\n  phrase: {\n    marginTop: 9,\n    marginBottom: 14\n  },\n  leftMargin: {\n    width: 15\n  },\n  rowIcon: {\n    width: 64,\n    height: 64,\n    marginRight: 20,\n    borderRadius: \"50%\",\n    boxShadow: \"0 1px 2px 0 rgba(0,0,0,0.1)\"\n  },\n  rowData: {\n    flex: 1,\n    marginLeft: 15\n  },\n  rowDataText: {\n    marginLeft: 15,\n    fontSize: 15,\n    textTransform: \"capitalize\",\n    color: \"#4b4b4b\"\n  },\n  rowDataSubText: {\n    fontSize: 13,\n    opacity: 0.8,\n    color: \"#a8a689\",\n    marginTop: 4\n  },\n  checkbox: {\n    width: 68\n  }\n});\n\nvar _default = PhraseList;\nexports.default = _default;","map":{"version":3,"sources":["/home/andrew/Documents/maven/mavenclient/src/phrase-list.js"],"names":["PhraseList","props","data","state","user","phrases","userphrases","PhraseItem","bind","console","log","getPhrases","sanityClient","fetch","then","res","setState","catch","err","error","phrase","item","styles","row","rowData","categories","categoryText","subcategoryText","phraseText","checkbox","require","React","Component","StyleSheet","create","width","flexDirection","backgroundColor","borderBottomWidth","hairlineWidth","borderColor","marginTop","marginBottom","leftMargin","rowIcon","height","marginRight","borderRadius","boxShadow","flex","marginLeft","rowDataText","fontSize","textTransform","color","rowDataSubText","opacity"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ScrollView, ActivityIndicator, StyleSheet, FlatList, View, Text } from \"react-native\";\n// import PhraseItem from \"./phrase-item\";\nimport sanityClient from './assets/client'\nimport AppText from './assets/text'\nimport AppTextSecondary from './assets/text-secondary'\nimport CheckBox from 'react-native-check-box'\n\n// const \n\nclass PhraseList extends React.Component {\n    constructor(props, data) {\n        super(props);\n        this.state = {\n            user: this.props.data.user,\n            phrases: [],\n            userphrases: []\n        };\n        this.PhraseItem = this.PhraseItem.bind(this);\n        console.log(this.state.user);\n    }\n\n    componentDidMount() {\n        this.getPhrases();\n        \n    }\n\n    async getPhrases() {\n        sanityClient.fetch('*[_type==\"phrase\"]')\n            .then((res) =>{\n                this.setState({phrases: res});\n            })\n            .catch((err) => console.error(err))\n    }\n\n    PhraseItem ({ item: phrase }) {\n        return (\n          <View style={styles.row}>\n            <View style={styles.rowData}>\n                <View style={styles.categories}>\n                    <AppTextSecondary>{phrase.categoryText} ● {phrase.subcategoryText}</AppTextSecondary>\n                </View>\n                <View style={styles.phrase}>\n                    <AppText>{phrase.phraseText}</AppText>\n                </View>\n            </View>\n            <View style={styles.checkbox}>\n              <Image\n                source={require('./assets/images/checkbox.png')}\n              />\n            </View>\n          </View>\n        );\n      };\n\n    render() {\n        return (\n            <FlatList\n                data={this.state.phrases}\n                renderItem={this.PhraseItem}\n            >\n            </FlatList>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    row: {\n      width: 375,\n      flexDirection: \"row\",\n      // justifyContent: \"center\",\n      // alignItems: \"center\",\n      // padding: 15,\n      // marginBottom: 13,\n      backgroundColor: \"white\",\n      borderBottomWidth: StyleSheet.hairlineWidth,\n      // borderWidth: StyleSheet.hairlineWidth,\n      borderColor: \"rgba(0,0,0,0.1)\",\n      // borderRadius: '4px'\n    },\n    categories: {\n      marginTop: 14\n    },\n    phrase: {\n      marginTop: 9,\n      marginBottom: 14\n    },\n    leftMargin: {\n      width: 15,\n    },\n    rowIcon: {\n      width: 64,\n      height: 64,\n      marginRight: 20,\n      borderRadius: \"50%\",\n      boxShadow: \"0 1px 2px 0 rgba(0,0,0,0.1)\"\n    },\n    rowData: {\n      flex: 1,\n      marginLeft: 15\n    },\n    rowDataText: {\n      marginLeft: 15,\n      fontSize: 15,\n      textTransform: \"capitalize\",\n      color: \"#4b4b4b\"\n    },\n    rowDataSubText: {\n      fontSize: 13,\n      opacity: 0.8,\n      color: \"#a8a689\",\n      marginTop: 4\n    },\n    checkbox: {\n      width: 68\n    }\n  });\n\nexport default PhraseList;"]},"metadata":{},"sourceType":"script"}