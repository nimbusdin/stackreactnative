{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _jsxFileName = \"/Users/nicastelo/Lab/react-native-swipeable-lists/src/SwipeableListView.js\";\n\nvar SwipeableListView = function (_React$Component) {\n  (0, _inherits2.default)(SwipeableListView, _React$Component);\n  (0, _createClass2.default)(SwipeableListView, null, [{\n    key: \"getNewDataSource\",\n    value: function getNewDataSource() {\n      return new SwipeableListViewDataSource({\n        getRowData: function getRowData(data, sectionID, rowID) {\n          return data[sectionID][rowID];\n        },\n        getSectionHeaderData: function getSectionHeaderData(data, sectionID) {\n          return data[sectionID];\n        },\n        rowHasChanged: function rowHasChanged(row1, row2) {\n          return row1 !== row2;\n        },\n        sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {\n          return s1 !== s2;\n        }\n      });\n    }\n  }]);\n\n  function SwipeableListView(props, context) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SwipeableListView);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SwipeableListView).call(this, props, context));\n    _this._listViewRef = null;\n    _this._shouldBounceFirstRowOnMount = false;\n\n    _this._onScroll = function (e) {\n      if (_this.props.dataSource.getOpenRowID()) {\n        _this.setState({\n          dataSource: _this.state.dataSource.setOpenRowID(null)\n        });\n      }\n\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n\n    _this._renderRow = function (rowData, sectionID, rowID) {\n      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);\n\n      if (!slideoutView) {\n        return _this.props.renderRow(rowData, sectionID, rowID);\n      }\n\n      var shouldBounceOnMount = false;\n\n      if (_this._shouldBounceFirstRowOnMount) {\n        _this._shouldBounceFirstRowOnMount = false;\n        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();\n      }\n\n      return _react.default.createElement(SwipeableRow, {\n        slideoutView: slideoutView,\n        isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),\n        maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),\n        key: rowID,\n        onOpen: function onOpen() {\n          return _this._onOpen(rowData.id);\n        },\n        onClose: function onClose() {\n          return _this._onClose(rowData.id);\n        },\n        onSwipeEnd: function onSwipeEnd() {\n          return _this._setListViewScrollable(true);\n        },\n        onSwipeStart: function onSwipeStart() {\n          return _this._setListViewScrollable(false);\n        },\n        shouldBounceOnMount: shouldBounceOnMount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        }\n      }, _this.props.renderRow(rowData, sectionID, rowID));\n    };\n\n    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;\n    _this.state = {\n      dataSource: _this.props.dataSource\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(SwipeableListView, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {\n        this.setState({\n          dataSource: nextProps.dataSource\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(ListView, (0, _extends2.default)({}, this.props, {\n        ref: function ref(_ref) {\n          _this2._listViewRef = _ref;\n        },\n        dataSource: this.state.dataSource.getDataSource(),\n        onScroll: this._onScroll,\n        renderRow: this._renderRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }));\n    }\n  }, {\n    key: \"_setListViewScrollable\",\n    value: function _setListViewScrollable(value) {\n      if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {\n        this._listViewRef.setNativeProps({\n          scrollEnabled: value\n        });\n      }\n    }\n  }, {\n    key: \"getScrollResponder\",\n    value: function getScrollResponder() {\n      if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {\n        return this._listViewRef.getScrollResponder();\n      }\n    }\n  }, {\n    key: \"_getMaxSwipeDistance\",\n    value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {\n      if (typeof this.props.maxSwipeDistance === 'function') {\n        return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n      }\n\n      return this.props.maxSwipeDistance;\n    }\n  }, {\n    key: \"_onOpen\",\n    value: function _onOpen(rowID) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(rowID)\n      });\n    }\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(rowID) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(null)\n      });\n    }\n  }]);\n  return SwipeableListView;\n}(_react.default.Component);\n\nSwipeableListView.defaultProps = {\n  bounceFirstRowOnMount: false,\n  renderQuickActions: function renderQuickActions() {\n    return null;\n  }\n};\nvar _default = SwipeableListView;\nexports.default = _default;","map":{"version":3,"sources":["SwipeableListView.js"],"names":["SwipeableListView","React","Component","_listViewRef","_shouldBounceFirstRowOnMount","getRowData","data","getSectionHeaderData","rowHasChanged","row1","sectionHeaderHasChanged","s1","defaultProps","bounceFirstRowOnMount","renderQuickActions","dataSource","nextProps","value","scrollEnabled","rowData","sectionID","rowID","slideoutView","shouldBounceOnMount"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAoEMA,IAAAA,iB;;;;uCAO8B;AAChC,aAAO,IAAA,2BAAA,CAAgC;AACrCK,QAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA;AAAA,iBAA4BC,IAAI,CAAJA,SAAI,CAAJA,CAA5B,KAA4BA,CAA5B;AADyB,SAAA;AAErCC,QAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,IAAA,EAAA,SAAA,EAAA;AAAA,iBAAqBD,IAAI,CAAzB,SAAyB,CAAzB;AAFe,SAAA;AAGrCE,QAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,iBAAgBC,IAAI,KAApB,IAAA;AAHsB,SAAA;AAIrCC,QAAAA,uBAAuB,EAAE,SAAA,uBAAA,CAAA,EAAA,EAAA,EAAA,EAAA;AAAA,iBAAYC,EAAE,KAAd,EAAA;AAJ3B;AAAuC,OAAhC,CAAP;;;;AAaF,WAAA,iBAAA,CAAA,KAAA,EAAA,OAAA,EAA8C;AAAA,QAAA,KAAA;;AAAA,kCAAA,IAAA,EAAA,iBAAA;AAC5C,IAAA,KAAA,GAAA,yCAAA,IAAA,EAAA,8BAAA,iBAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,OAAA,CAAA,CAAA;AAD4C,IAAA,KAAA,CAjB9CR,YAiB8C,GAjBV,IAiBU;AAAA,IAAA,KAAA,CAhB9CC,4BAgB8C,GAhBN,KAgBM;;AAAA,IAAA,KAAA,CAAA,SAAA,GAoClC,UAAA,CAAA,EAAa;AAEvB,UAAI,KAAA,CAAA,KAAA,CAAA,UAAA,CAAJ,YAAI,EAAJ,EAA0C;AACxC,QAAA,KAAA,CAAA,QAAA,CAAc;AACZW,UAAAA,UAAU,EAAE,KAAA,CAAA,KAAA,CAAA,UAAA,CAAA,YAAA,CADd,IACc;AADA,SAAd;AAIF;;AAAA,MAAA,KAAA,CAAA,KAAA,CAAA,QAAA,IAAuB,KAAA,CAAA,KAAA,CAAA,QAAA,CAAvB,CAAuB,CAAvB;AA3C4C,KAAA;;AAAA,IAAA,KAAA,CAAA,UAAA,GA4FjC,UAAA,OAAA,EAAA,SAAA,EAAA,KAAA,EAIY;AACvB,UAAMO,YAAY,GAAG,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAA,OAAA,EAAA,SAAA,EAArB,KAAqB,CAArB;;AAOA,UAAI,CAAJ,YAAA,EAAmB;AACjB,eAAO,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,OAAA,EAAA,SAAA,EAAP,KAAO,CAAP;AAGF;;AAAA,UAAIC,mBAAmB,GAAvB,KAAA;;AACA,UAAI,KAAA,CAAJ,4BAAA,EAAuC;AACrC,QAAA,KAAA,CAAA,4BAAA,GAAA,KAAA;AACAA,QAAAA,mBAAmB,GAAGF,KAAK,KAAK,KAAA,CAAA,KAAA,CAAA,UAAA,CAAhCE,aAAgC,EAAhCA;AAGF;;AAAA,aACE,eAAA,aAAA,CAAA,YAAA,EAAA;AACE,QAAA,YAAY,EADd,YAAA;AAEE,QAAA,MAAM,EAAEJ,OAAO,CAAPA,EAAAA,KAAe,KAAA,CAAA,KAAA,CAAA,UAAA,CAFzB,YAEyB,EAFzB;AAGE,QAAA,gBAAgB,EAAE,KAAA,CAAA,oBAAA,CAAA,OAAA,EAAA,SAAA,EAHpB,KAGoB,CAHpB;AAIE,QAAA,GAAG,EAJL,KAAA;AAKE,QAAA,MAAM,EAAE,SAAA,MAAA,GAAA;AAAA,iBAAM,KAAA,CAAA,OAAA,CAAaA,OAAO,CAA1B,EAAM,CAAN;AALV,SAAA;AAME,QAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,iBAAM,KAAA,CAAA,QAAA,CAAcA,OAAO,CAA3B,EAAM,CAAN;AANX,SAAA;AAOE,QAAA,UAAU,EAAE,SAAA,UAAA,GAAA;AAAA,iBAAM,KAAA,CAAA,sBAAA,CAAN,IAAM,CAAN;AAPd,SAAA;AAQE,QAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAM,KAAA,CAAA,sBAAA,CAAN,KAAM,CAAN;AARhB,SAAA;AASE,QAAA,mBAAmB,EATrB,mBAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAUG,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,OAAA,EAAA,SAAA,EAXL,KAWK,CAVH,CADF;AAlH4C,KAAA;;AAG5C,IAAA,KAAA,CAAA,4BAAA,GAAoC,KAAA,CAAA,KAAA,CAApC,qBAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACXJ,MAAAA,UAAU,EAAE,KAAA,CAAA,KAAA,CADd;AAAa,KAAb;AAJ4C,WAAA,KAAA;;;;;qDASbC,S,EAAwB;AACvD,UACE,KAAA,KAAA,CAAA,UAAA,CAAA,aAAA,OACAA,SAAS,CAATA,UAAAA,CAFF,aAEEA,EAFF,EAGE;AACA,aAAA,QAAA,CAAc;AACZD,UAAAA,UAAU,EAAEC,SAAS,CADvB;AAAc,SAAd;AAIH;;;;6BAEoB;AAAA,UAAA,MAAA,GAAA,IAAA;;AACnB,aAEE,eAAA,aAAA,CAAA,QAAA,EAAA,uBAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,GAAG,EAAE,SAAA,GAAA,CAAA,IAAA,EAAO;AAEV,UAAA,MAAI,CAAJ,YAAA,GAAA,IAAA;AAJJ,SAAA;AAME,QAAA,UAAU,EAAE,KAAA,KAAA,CAAA,UAAA,CANd,aAMc,EANd;AAOE,QAAA,QAAQ,EAAE,KAPZ,SAAA;AAQE,QAAA,SAAS,EAAE,KARb,UAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAFF;AAEE;AAAA,OAAA,CAAA,CAFF;;;;2CA+BqBC,K,EAAsB;AAC3C,UACE,KAAA,YAAA,IAIA,OAAO,KAAA,YAAA,CAAP,cAAA,KALF,UAAA,EAME;AACA,aAAA,YAAA,CAAA,cAAA,CAAiC;AAC/BC,UAAAA,aAAa,EADf;AAAiC,SAAjC;AAIH;;;;yCAG6B;AAC5B,UACE,KAAA,YAAA,IAIA,OAAO,KAAA,YAAA,CAAP,kBAAA,KALF,UAAA,EAME;AACA,eAAO,KAAA,YAAA,CAAP,kBAAO,EAAP;AAEH;;;;yCAICC,O,EACAC,S,EACAC,K,EACQ;AACR,UAAI,OAAO,KAAA,KAAA,CAAP,gBAAA,KAAJ,UAAA,EAAuD;AACrD,eAAO,KAAA,KAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,SAAA,EAAP,KAAO,CAAP;AAGF;;AAAA,aAAO,KAAA,KAAA,CAAP,gBAAA;;;;4BAyCMA,K,EAAqB;AAC3B,WAAA,QAAA,CAAc;AACZN,QAAAA,UAAU,EAAE,KAAA,KAAA,CAAA,UAAA,CAAA,YAAA,CADd,KACc;AADA,OAAd;;;;6BAKOM,K,EAAqB;AAC5B,WAAA,QAAA,CAAc;AACZN,QAAAA,UAAU,EAAE,KAAA,KAAA,CAAA,UAAA,CAAA,YAAA,CADd,IACc;AADA,OAAd;;;;EA9J4Bd,eAAMC,S,CAAhCF;;AAAAA,iB,CAgBGY,YAhBHZ,GAgBkB;AACpBa,EAAAA,qBAAqB,EADD,KAAA;AAEpBC,EAAAA,kBAAkB,EAAE,SAAA,kBAAA,GAAA;AAAA,WAAA,IAAA;AAFA;AAAA,CAhBlBd;eAoKN,iB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport React from 'react';\n\nimport type {SwipeableListViewDataSource} from './SwipeableListViewDataSource';\nimport type {ListView} from 'react-native/Libraries/Lists/ListView/ListView';\nimport type {SwipeableRow} from './SwipeableRow';\n\ntype ListViewProps = React.ElementConfig<typeof ListView>;\n\ntype Props = $ReadOnly<{|\n  ...ListViewProps,\n\n  /**\n   * To alert the user that swiping is possible, the first row can bounce\n   * on component mount.\n   */\n  bounceFirstRowOnMount: boolean,\n  /**\n   * Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n   * then use it just like you would a normal ListView data source\n   */\n  dataSource: SwipeableListViewDataSource,\n  /**\n   * Maximum distance to open to after a swipe\n   */\n  maxSwipeDistance:\n    | number\n    | ((rowData: Object, sectionID: string, rowID: string) => number),\n  onScroll?: ?Function,\n  /**\n   * Callback method to render the swipeable view\n   */\n  renderRow: (\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ) => React.Element<any>,\n  /**\n   * Callback method to render the view that will be unveiled on swipe\n   */\n  renderQuickActions: (\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ) => ?React.Element<any>,\n|}>;\n\ntype State = {|\n  dataSource: Object,\n|};\n\n/**\n * A container component that renders multiple SwipeableRow's in a ListView\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `ListView`, so use it as if it were a ListView, but\n * with extra props, i.e.\n *\n * let ds = SwipeableListView.getNewDataSource();\n * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n * // ..\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - More to come\n */\nclass SwipeableListView extends React.Component<Props, State> {\n  props: Props;\n  state: State;\n\n  _listViewRef: ?React.Element<any> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static getNewDataSource(): Object {\n    return new SwipeableListViewDataSource({\n      getRowData: (data, sectionID, rowID) => data[sectionID][rowID],\n      getSectionHeaderData: (data, sectionID) => data[sectionID],\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n  }\n\n  static defaultProps = {\n    bounceFirstRowOnMount: false,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props, context: any): void {\n    super(props, context);\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n    this.state = {\n      dataSource: this.props.dataSource,\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props): void {\n    if (\n      this.state.dataSource.getDataSource() !==\n      nextProps.dataSource.getDataSource()\n    ) {\n      this.setState({\n        dataSource: nextProps.dataSource,\n      });\n    }\n  }\n\n  render(): React.Node {\n    return (\n      // $FlowFixMe Found when typing ListView\n      <ListView\n        {...this.props}\n        ref={ref => {\n          // $FlowFixMe Found when typing ListView\n          this._listViewRef = ref;\n        }}\n        dataSource={this.state.dataSource.getDataSource()}\n        onScroll={this._onScroll}\n        renderRow={this._renderRow}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.props.dataSource.getOpenRowID()) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(null),\n      });\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  /**\n   * This is a work-around to lock vertical `ListView` scrolling on iOS and\n   * mimic Android behaviour. Locking vertical scrolling when horizontal\n   * scrolling is active allows us to significantly improve framerates\n   * (from high 20s to almost consistently 60 fps)\n   */\n  _setListViewScrollable(value: boolean): void {\n    if (\n      this._listViewRef &&\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n      * error found when Flow v0.68 was deployed. To see the error delete this\n      * comment and run Flow. */\n      typeof this._listViewRef.setNativeProps === 'function'\n    ) {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  // Passing through ListView's getScrollResponder() function\n  getScrollResponder(): ?Object {\n    if (\n      this._listViewRef &&\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n      * error found when Flow v0.68 was deployed. To see the error delete this\n      * comment and run Flow. */\n      typeof this._listViewRef.getScrollResponder === 'function'\n    ) {\n      return this._listViewRef.getScrollResponder();\n    }\n  }\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _renderRow = (\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ): React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(\n      rowData,\n      sectionID,\n      rowID,\n    );\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderRow(rowData, sectionID, rowID);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = rowID === this.props.dataSource.getFirstRowID();\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={rowData.id === this.props.dataSource.getOpenRowID()}\n        maxSwipeDistance={this._getMaxSwipeDistance(rowData, sectionID, rowID)}\n        key={rowID}\n        onOpen={() => this._onOpen(rowData.id)}\n        onClose={() => this._onClose(rowData.id)}\n        onSwipeEnd={() => this._setListViewScrollable(true)}\n        onSwipeStart={() => this._setListViewScrollable(false)}\n        shouldBounceOnMount={shouldBounceOnMount}>\n        {this.props.renderRow(rowData, sectionID, rowID)}\n      </SwipeableRow>\n    );\n  };\n\n  _onOpen(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID),\n    });\n  }\n\n  _onClose(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null),\n    });\n  }\n}\n\nexport default SwipeableListView;\n"]},"metadata":{},"sourceType":"script"}