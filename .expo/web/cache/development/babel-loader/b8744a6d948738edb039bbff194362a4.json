{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _SwipeableRow = _interopRequireDefault(require(\"./SwipeableRow\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"/Users/nicastelo/Lab/react-native-swipeable-lists/src/SwipeableFlatList.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar SwipeableFlatList = function (_React$Component) {\n  (0, _inherits2.default)(SwipeableFlatList, _React$Component);\n\n  function SwipeableFlatList(props, context) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SwipeableFlatList);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SwipeableFlatList).call(this, props, context));\n    _this._flatListRef = null;\n    _this._shouldBounceFirstRowOnMount = false;\n\n    _this._onScroll = function (e) {\n      if (_this.state.openRowKey) {\n        _this.setState({\n          openRowKey: null\n        });\n      }\n\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n\n    _this._renderItem = function (info) {\n      var slideoutView = _this.props.renderQuickActions(info);\n\n      var key = _this.props.keyExtractor(info.item, info.index);\n\n      if (!slideoutView) {\n        return _this.props.renderItem(info);\n      }\n\n      var shouldBounceOnMount = false;\n\n      if (_this._shouldBounceFirstRowOnMount) {\n        _this._shouldBounceFirstRowOnMount = false;\n        shouldBounceOnMount = true;\n      }\n\n      return _react.default.createElement(_SwipeableRow.default, {\n        slideoutView: slideoutView,\n        isOpen: key === _this.state.openRowKey,\n        maxSwipeDistance: _this._getMaxSwipeDistance(info),\n        onOpen: function onOpen() {\n          return _this._onOpen(key);\n        },\n        onClose: function onClose() {\n          return _this._onClose(key);\n        },\n        shouldBounceOnMount: shouldBounceOnMount,\n        onSwipeEnd: _this._setListViewScrollable,\n        onSwipeStart: _this._setListViewNotScrollable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, _this.props.renderItem(info));\n    };\n\n    _this._setListViewScrollable = function () {\n      _this._setListViewScrollableTo(true);\n    };\n\n    _this._setListViewNotScrollable = function () {\n      _this._setListViewScrollableTo(false);\n    };\n\n    _this.state = {\n      openRowKey: null\n    };\n    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;\n    return _this;\n  }\n\n  (0, _createClass2.default)(SwipeableFlatList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({}, this.props, {\n        ref: function ref(_ref) {\n          _this2._flatListRef = _ref;\n        },\n        onScroll: this._onScroll,\n        renderItem: this._renderItem,\n        extraData: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        }\n      }));\n    }\n  }, {\n    key: \"_getMaxSwipeDistance\",\n    value: function _getMaxSwipeDistance(info) {\n      if (typeof this.props.maxSwipeDistance === 'function') {\n        return this.props.maxSwipeDistance(info);\n      }\n\n      return this.props.maxSwipeDistance;\n    }\n  }, {\n    key: \"_setListViewScrollableTo\",\n    value: function _setListViewScrollableTo(value) {\n      if (this._flatListRef) {\n        this._flatListRef.setNativeProps({\n          scrollEnabled: value\n        });\n      }\n    }\n  }, {\n    key: \"_onOpen\",\n    value: function _onOpen(key) {\n      this.setState({\n        openRowKey: key\n      });\n    }\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(key) {\n      this.setState({\n        openRowKey: null\n      });\n    }\n  }]);\n  return SwipeableFlatList;\n}(_react.default.Component);\n\nSwipeableFlatList.defaultProps = _objectSpread({}, _reactNative.FlatList.defaultProps, {\n  bounceFirstRowOnMount: true,\n  renderQuickActions: function renderQuickActions() {\n    return null;\n  }\n});\nvar _default = SwipeableFlatList;\nexports.default = _default;","map":{"version":3,"sources":["SwipeableFlatList.js"],"names":["SwipeableFlatList","React","Component","_flatListRef","_shouldBounceFirstRowOnMount","defaultProps","FlatList","bounceFirstRowOnMount","renderQuickActions","openRowKey","slideoutView","key","info","shouldBounceOnMount","value","scrollEnabled"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nimport React from 'react';\nimport SwipeableRow from './SwipeableRow';\nimport {FlatList} from 'react-native';\n\nimport type {Props as FlatListProps} from 'react-native/Libraries/Lists/FlatList';\nimport type {renderItemType} from 'react-native/Libraries/Lists/VirtualizedList';\n\n// TODO: Make this $ReadOnly and Exact. Will require doing the same to the props in\n//       Libraries/Lists/*\ntype SwipableListProps = {\n  /**\n   * To alert the user that swiping is possible, the first row can bounce\n   * on component mount.\n   */\n  bounceFirstRowOnMount: boolean,\n\n  /**\n   * Maximum distance to open to after a swipe\n   */\n  maxSwipeDistance: number | (Object => number),\n\n  /**\n   * Callback method to render the view that will be unveiled on swipe\n   */\n  renderQuickActions: renderItemType,\n};\n\ntype Props<ItemT> = SwipableListProps & FlatListProps<ItemT>;\n\ntype State = {|\n  openRowKey: ?string,\n|};\n\n/**\n * A container component that renders multiple SwipeableRow's in a FlatList\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `FlatList`, so use it as if it were a FlatList, but\n * with extra props, i.e.\n *\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..FlatList props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - Increase performance on iOS by locking list swiping when row swiping is occurring\n * - More to come\n */\n\nclass SwipeableFlatList<ItemT> extends React.Component<Props<ItemT>, State> {\n  _flatListRef: ?FlatList<ItemT> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static defaultProps = {\n    ...FlatList.defaultProps,\n    bounceFirstRowOnMount: true,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props<ItemT>, context: any): void {\n    super(props, context);\n    this.state = {\n      openRowKey: null,\n    };\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n  }\n\n  render(): React.Node {\n    return (\n      <FlatList\n        {...this.props}\n        ref={ref => {\n          this._flatListRef = ref;\n        }}\n        onScroll={this._onScroll}\n        renderItem={this._renderItem}\n        extraData={this.state}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.state.openRowKey) {\n      this.setState({\n        openRowKey: null,\n      });\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  _renderItem = (info: Object): ?React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(info);\n    const key = this.props.keyExtractor(info.item, info.index);\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderItem(info);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = true;\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={key === this.state.openRowKey}\n        maxSwipeDistance={this._getMaxSwipeDistance(info)}\n        onOpen={() => this._onOpen(key)}\n        onClose={() => this._onClose(key)}\n        shouldBounceOnMount={shouldBounceOnMount}\n        onSwipeEnd={this._setListViewScrollable}\n        onSwipeStart={this._setListViewNotScrollable}>\n        {this.props.renderItem(info)}\n      </SwipeableRow>\n    );\n  };\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(info: Object): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(info);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _setListViewScrollableTo(value: boolean) {\n    if (this._flatListRef) {\n      this._flatListRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  _setListViewScrollable = () => {\n    this._setListViewScrollableTo(true);\n  };\n\n  _setListViewNotScrollable = () => {\n    this._setListViewScrollableTo(false);\n  };\n\n  _onOpen(key: any): void {\n    this.setState({\n      openRowKey: key,\n    });\n  }\n\n  _onClose(key: any): void {\n    this.setState({\n      openRowKey: null,\n    });\n  }\n}\n\nexport default SwipeableFlatList;\n"]},"metadata":{},"sourceType":"script"}